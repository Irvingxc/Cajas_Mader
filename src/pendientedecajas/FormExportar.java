/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pendientedecajas;

import base.conectar;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.export.Exporter;

/**
 *
 * @author Elssy
 */
public class FormExportar extends javax.swing.JFrame {

    /**
     * Creates new form FormExportar
     */
    public FormExportar() {
        initComponents();
        mostrardatos_form("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    void mostrardatos_form(String valor) {
        DefaultTableModel modeloForm = new DefaultTableModel() {

            //NO EDITAR LAS FILAS EN LA TABLA    
            @Override
            public boolean isCellEditable(int row, int column) {

                return false;

            }
        };

        //modeloForm.addColumn("Id Pedido");
        modeloForm.addColumn("Id Caja");
        modeloForm.addColumn("Marca");
        modeloForm.addColumn("Vitola");
        modeloForm.addColumn("Nombre");
        modeloForm.addColumn("Capa");
        modeloForm.addColumn("Tipo de Empaque");
        modeloForm.addColumn("Iventario Inicial");
        modeloForm.addColumn("Enero");
        modeloForm.addColumn("Febrero");
        modeloForm.addColumn("Marzo");
        modeloForm.addColumn("Abril");
        modeloForm.addColumn("Mayo");
        modeloForm.addColumn("Junio");
        modeloForm.addColumn("Julio");
        modeloForm.addColumn("Agosto");
        modeloForm.addColumn("Septiembre");
        modeloForm.addColumn("Octubre");
        modeloForm.addColumn("Noviembre");
        modeloForm.addColumn("Diciembre");
        modeloForm.addColumn("Observaci√≥n");
        modeloForm.addColumn("Total Ordenes");
        modeloForm.addColumn("Total Entradas");
        modeloForm.addColumn("Numero de Contenedor");
        modeloForm.addColumn("Cantidad en Contenedor");
        modeloForm.addColumn("Fecha Contenedor");
        modeloForm.addColumn("Total Salidas");

        tbForm_inventario.setModel(modeloForm);

        //NO MOVER LAS COLUMNAS DE LA TABLA
        tbForm_inventario.getTableHeader().setReorderingAllowed(false);

        String sql = "";
        if (valor.equals("")) {
            sql = "select caja.id_caja, caja.marca, caja.vitola, caja.nombre,"
                    + "		caja.capa, caja.tipo_empaque, caja.invent_inicial, ped.enero, ped.febrero, ped.marzo, ped.abril, ped.mayo, ped.junio, "
                    + "        ped.julio, ped.agosto, ped.septiembre, ped.octubre, ped.noviembre, ped.diciembre, observacion_orden,  ped.total_orden, "
                    + "        en.total_entradas, sali.num_contenedor, sali.cant_contenedor, sali.fecha_contenedor, sal.total_salidas "
                    + "from registrocajas as caja "
                    + "join pedidosnuevos as ped on caja.id_caja = ped.id_caja "
                    + "join entradas as en on caja.id_caja = en.id_caja "
                    + "join salidas as sali on caja.id_caja = sali.id_caja "
                    + "join salidastotales as sal on caja.id_caja = sal.id_caja "
                    + "where caja.id_caja = caja.id_caja ";
        } else {
            return;
        }

        String[] datos = new String[25];
        try {
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                datos[0] = rs.getString(1);

                datos[1] = rs.getString(2);
                datos[2] = rs.getString(3);
                datos[3] = rs.getString(4);
                datos[4] = rs.getString(5);
                datos[5] = rs.getString(6);
                datos[6] = rs.getString(7);
                datos[7] = rs.getString(8);
                datos[8] = rs.getString(9);
                datos[9] = rs.getString(10);
                datos[10] = rs.getString(11);
                datos[11] = rs.getString(12);
                datos[12] = rs.getString(13);
                datos[13] = rs.getString(14);
                datos[14] = rs.getString(15);
                datos[15] = rs.getString(16);
                datos[16] = rs.getString(17);
                datos[17] = rs.getString(18);
                datos[18] = rs.getString(19);
                datos[19] = rs.getString(20);
                datos[20] = rs.getString(21);
                datos[21] = rs.getString(22);
                datos[22] = rs.getString(23);
                datos[23] = rs.getString(24);
                datos[24] = rs.getString(25);

                modeloForm.addRow(datos);
            }
            tbForm_inventario.setModel(modeloForm);

            // PARA REFRESCAR LA TABLA -- ESTA EN PRUEBA
            DefaultTableModel tableModel = (DefaultTableModel) tbForm_inventario.getModel();
            tbForm_inventario.setModel(tableModel);
        } catch (SQLException ex) {
            Logger.getLogger(VerEntradas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbForm_inventario = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 255, 102));

        tbForm_inventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbForm_inventario);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1330, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormExportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormExportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormExportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormExportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormExportar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbForm_inventario;
    // End of variables declaration//GEN-END:variables

    conectar cc = new conectar();
    Connection cn = cc.conexion();

    String Ruta;

    public void impresion() {
        String imagen = "C:\\reporte\\Reporte_Inventario_MP.xls";
        //Ruta = System.getProperty("C:") + "\\" + imagen;
        File file = new File(imagen);
        ExportarExcel excel = new ExportarExcel(tbForm_inventario, file, "tbtablas");
        excel.export();
    }

    public void elemento() {
        if (tbForm_inventario.getRowCount() > 0) {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de excel", "xls");
            chooser.setFileFilter(filter);
            chooser.setDialogTitle("Guardar archivo");
            chooser.setAcceptAllFileFilterUsed(false);
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                List tb = new ArrayList();
                List nom = new ArrayList();
                tb.add(tbForm_inventario);
                nom.add("Compras por factura");
                String file = chooser.getSelectedFile().toString().concat(".xls");
                try {
                    FormExportar2 e = new FormExportar2(new File(file), tb, nom) {
                    };
                    if (e.export()) {
                        JOptionPane.showMessageDialog(null, "Los datos fueron exportados a excel en el directorio seleccionado", "Mensaje de Informacion", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Hubo un error " + e.getMessage(), " Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay datos para exportar", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
        }
    }

}
